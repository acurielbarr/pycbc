#!/usr/bin/env python

from pycbc import conversions
import numpy
from matplotlib import use
use("agg")
from matplotlib import pyplot
from scipy.integrate import quad

import argparse

#mass_area.py

#Integration of the area laying in the different cbc regions
#By A. Curiel Barroso
#August 2019

#--------------------------------------------
#This script computes the area corresponding 
#to different CBC on the m1 & m2 plane when  
#given a central mchirp value and uncertainty
#--------------------------------------------

#ARGUMENT PARSER

parser = argparse.ArgumentParser()

parser.add_argument("--min-mc","--min-mc",type=float,help="smaller chirp mass")
parser.add_argument("--max-mc","--max-mc",type=float,help="bigger chirp mass")

parser.add_argument("--central-mc","--central-mc",type=float,help="central value of mchirp")
parser.add_argument("--delta-mc","--delta-mc",type=float,help="uncertainty for mchirp")

parser.add_argument("--min-m2","--min-m2",type=float,help="minimum value for m2")
parser.add_argument("--max-m1","--max-m1",type=float,help="maximum value for m1")

args = parser.parse_args()

if args.min_mc and args.max_mc:
    mcb=float(args.max_mc)
    mcs=float(args.min_mc)

if args.central_mc and args.delta_mc:
    mcb=float(args.central_mc)+float(args.delta_mc)
    mcs=float(args.central_mc)-float(args.delta_mc)

if args.min_m2 and args.max_m1:
    m2_min=float(args.min_m2)
    m1_max=float(args.max_m1)

#The points where the equal mass line and a chirp mass
#curve intersect is m1=m2=2**0.2*mchirp

mib=(2**0.2)*mcb
mis=(2**0.2)*mcs

#Assumed physical limits for the ns mass
#It is expected that m2_min < ns_max

ns_max=3.0
gap_max=5.0

#Integration function

def intmc(mc,x_min,x_max):

    def f(x,mc):

        result=conversions.mass2_from_mchirp_mass1(mc,x)
    
        return result

    integral=quad(f, x_min, x_max, args=(mc))
    area=integral[0]

    return area

#---------------------------------------------------------
#AREA FOR BBH

if mib < gap_max:
    abbh=0.0
    
else:
    limb_bbh=min(m1_max,conversions.mass2_from_mchirp_mass1(mcb,gap_max))

    intb_bbh=intmc(mcb,mib,limb_bbh)

    if mis < gap_max:
        lims1_bbh=gap_max
        lims2_bbh=lims1_bbh
    else:
        lims1_bbh=mis
        lims2_bbh=min(m1_max,conversions.mass2_from_mchirp_mass1(mcs,gap_max))

    ints_bbh=intmc(mcs,lims1_bbh,lims2_bbh)

    limdiag_bbh=max(conversions.mass2_from_mchirp_mass1(mcs,lims1_bbh),gap_max)
    
    intline_sup_bbh=(0.5)*(limdiag_bbh+mib)*(mib-lims1_bbh)
    intline_inf_bbh=(limb_bbh-lims2_bbh)*gap_max

    int_sup_bbh=intb_bbh+intline_sup_bbh
    int_inf_bbh=ints_bbh+intline_inf_bbh

    abbh=int_sup_bbh-int_inf_bbh

#---------------------------------------------------------
#AREA FOR BHG

if conversions.mass2_from_mchirp_mass1(mcb,gap_max) < ns_max or conversions.mass2_from_mchirp_mass1(mcs,m1_max) > gap_max:
    abhg=0.0

else:

    if conversions.mass2_from_mchirp_mass1(mcb,m1_max) > gap_max:
        limb2_bhg=m1_max
        limb1_bhg=limb2_bhg
    else:
        limb2_bhg=min(m1_max,conversions.mass2_from_mchirp_mass1(mcb,ns_max))
        limb1_bhg=max(gap_max,conversions.mass2_from_mchirp_mass1(mcb,gap_max))

    intb_bhg=intmc(mcb,limb1_bhg,limb2_bhg)

    if conversions.mass2_from_mchirp_mass1(mcs,gap_max) < ns_max:
        lims2_bhg=gap_max
        lims1_bhg=lims2_bhg

    else:
        lims1_bhg=max(gap_max,conversions.mass2_from_mchirp_mass1(mcs,gap_max))
        lims2_bhg=min(m1_max,conversions.mass2_from_mchirp_mass1(mcs,ns_max))

    intline_inf_bhg=(limb2_bhg-lims2_bhg)*ns_max
    intline_sup_bhg=(limb1_bhg-lims1_bhg)*gap_max

    ints_bhg=intmc(mcs,lims1_bhg,lims2_bhg)
        
    int_sup_bhg=intb_bhg+intline_sup_bhg
    int_inf_bhg=ints_bhg+intline_inf_bhg

    abhg=int_sup_bhg-int_inf_bhg

#----------------------------------------------------
#AREA FOR GG

if conversions.mass2_from_mchirp_mass1(mcs,gap_max) > gap_max or conversions.mass2_from_mchirp_mass1(mcb,ns_max) < ns_max:
    agg=0.0
    
else:
    
    if conversions.mass2_from_mchirp_mass1(mcb,gap_max)>gap_max:
        limb2_gg=gap_max
        limb1_gg=limb2_gg
        
    else:
        limb1_gg=mib
        limb2_gg=min(gap_max,conversions.mass2_from_mchirp_mass1(mcb,ns_max))

    intb_gg=intmc(mcb,limb1_gg,limb2_gg)

    if conversions.mass2_from_mchirp_mass1(mcs,ns_max) < ns_max:
        lims2_gg=ns_max
        lims1_gg=lims2_gg

    else:
        lims1_gg=mis
        lims2_gg=min(gap_max,conversions.mass2_from_mchirp_mass1(mcs,ns_max))

    ints_gg=intmc(mcs,lims1_gg,lims2_gg)

    limdiag1_gg=max(conversions.mass2_from_mchirp_mass1(mcs,lims1_gg),ns_max)
    limdiag2_gg=min(conversions.mass2_from_mchirp_mass1(mcb,limb1_gg),gap_max)

    intline_sup_gg=(0.5)*(limb1_gg-lims1_gg)*(limdiag1_gg+limdiag2_gg)
    intline_inf_gg=(limb2_gg-lims2_gg)*ns_max
    
    int_sup_gg=intb_gg+intline_sup_gg
    int_inf_gg=ints_gg+intline_inf_gg

    agg=int_sup_gg-int_inf_gg

#----------------------------------------------------
#AREA FOR BNS

if conversions.mass2_from_mchirp_mass1(mcs,ns_max)>ns_max:
    abns=0.0
else:

    if conversions.mass2_from_mchirp_mass1(mcb,ns_max)>ns_max:
        limb2_bns=ns_max
        limb1_bns=limb2_bns
    else:
        limb2_bns=min(ns_max,conversions.mass2_from_mchirp_mass1(mcb,m2_min))
        limb1_bns=mib

    intb_bns=intmc(mcb,limb1_bns,limb2_bns)

    if mis < m2_min:
        lims2_bns=m2_min
        lims1_bns=lims2_bns
    else:
        lims2_bns=min(ns_max,conversions.mass2_from_mchirp_mass1(mcs,m2_min))
        lims1_bns=mis

    ints_bns=intmc(mcs,lims1_bns,lims2_bns)

    intline_inf_bns=(limb2_bns-lims2_bns)*m2_min

    limdiag1_bns=max(conversions.mass2_from_mchirp_mass1(mcs,lims1_bns),m2_min)
    limdiag2_bns=min(conversions.mass2_from_mchirp_mass1(mcb,limb1_bns),ns_max)
    
    intline_sup_bns=(0.5)*(limdiag1_bns+limdiag2_bns)*(limb1_bns-lims1_bns)

    int_sup_bns=intb_bns+intline_sup_bns
    int_inf_bns=ints_bns+intline_inf_bns

    abns=int_sup_bns-int_inf_bns

#-----------------------------------------------------
#AREA FOR GNS

if conversions.mass2_from_mchirp_mass1(mcs,gap_max) > ns_max or conversions.mass2_from_mchirp_mass1(mcb,ns_max) < m2_min:
    agns=0.0
else:

    if conversions.mass2_from_mchirp_mass1(mcb,gap_max)>ns_max:
        limb2_gns=gap_max
        limb1_gns=limb2_gns
    else:
        limb2_gns=min(gap_max,conversions.mass2_from_mchirp_mass1(mcb,m2_min))
        limb1_gns=max(ns_max,conversions.mass2_from_mchirp_mass1(mcb,ns_max))

    intb_gns=intmc(mcb,limb1_gns,limb2_gns)

    if conversions.mass2_from_mchirp_mass1(mcs,ns_max) < m2_min:
        lims2_gns=ns_max
        lims1_gns=lims2_gns

    else:
        lims1_gns=max(ns_max,conversions.mass2_from_mchirp_mass1(mcs,ns_max))
        lims2_gns=min(gap_max,conversions.mass2_from_mchirp_mass1(mcs,m2_min))
        
    intline_inf_gns=(limb2_gns-lims2_gns)*m2_min
    intline_sup_gns=(limb1_gns-lims1_gns)*ns_max

    ints_gns=intmc(mcs,lims1_gns,lims2_gns)

    int_sup_gns=intb_gns+intline_sup_gns
    int_inf_gns=ints_gns+intline_inf_gns

    agns=int_sup_gns-int_inf_gns

#----------------------------------------------------
#AREA FOR NSBH

if conversions.mass2_from_mchirp_mass1(mcs,m1_max)>ns_max or conversions.mass2_from_mchirp_mass1(mcb,gap_max)<m2_min:
    ansbh=0.0
else:

    if conversions.mass2_from_mchirp_mass1(mcb,m1_max)>ns_max:
        limb2_nsbh=m1_max
        limb1_nsbh=limb2_nsbh
    else:
        limb1_nsbh=max(gap_max,conversions.mass2_from_mchirp_mass1(mcb,ns_max))
        limb2_nsbh=min(m1_max,conversions.mass2_from_mchirp_mass1(mcb,m2_min))

    intb_nsbh=intmc(mcb,limb1_nsbh,limb2_nsbh)

    if conversions.mass2_from_mchirp_mass1(mcs,gap_max)<m2_min:
        lims1_nsbh=gap_max
        lims2_nsbh=lims1_nsbh
    else:
        lims1_nsbh=max(gap_max,conversions.mass2_from_mchirp_mass1(mcs,ns_max))
        lims2_nsbh=min(m1_max,conversions.mass2_from_mchirp_mass1(mcs,m2_min))

    intline_inf_nsbh=(limb2_nsbh-lims2_nsbh)*m2_min
    intline_sup_nsbh=(limb1_nsbh-lims1_nsbh)*ns_max

    ints_nsbh=intmc(mcs,lims1_nsbh,lims2_nsbh)

    int_sup_nsbh=intb_nsbh+intline_sup_nsbh
    int_inf_nsbh=ints_nsbh+intline_inf_nsbh

    ansbh=int_sup_nsbh-int_inf_nsbh

#--------------------------------------------------------
    
print "abbh = "+str(abbh)
print "abhg = "+str(abhg)
print "agg = "+str(agg)
print "ansbh = "+str(ansbh)
print "agns = "+str(agns)
print "abns = "+str(abns)

area_out={"bns":abns,"gns":agns,"nsbh":ansbh,"gg":agg,"bhg":abhg,"bbh":abbh}

#PLOT GENERATION

lim_m1b=min(m1_max,conversions.mass2_from_mchirp_mass1(mcb,m2_min))
m1b=numpy.linspace(mib,lim_m1b,num=100)
m2b=conversions.mass2_from_mchirp_mass1(mcb,m1b)

lim_m1s=min(m1_max,conversions.mass2_from_mchirp_mass1(mcs,m2_min))
m1s=numpy.linspace(mis,lim_m1s,num=100)
m2s=conversions.mass2_from_mchirp_mass1(mcs,m1s)

if mib>m1_max:
    pyplot.plot((m1_max,m1_max),(conversions.mass2_from_mchirp_mass1(mcs,lim_m1s),m1_max),"b")
    
else:
    pyplot.plot(m1b,m2b,"b")
    pyplot.plot((m1_max,m1_max),(conversions.mass2_from_mchirp_mass1(mcs,lim_m1s),conversions.mass2_from_mchirp_mass1(mcb,lim_m1b)),"b")

if mis>=m2_min:
    pyplot.plot(m1s,m2s,"b")

    pyplot.plot((lim_m1s,lim_m1b),(m2_min,m2_min),"b")
else:
    pyplot.plot((m2_min,lim_m1b),(m2_min,m2_min),"b")

pyplot.plot((m2_min,m1_max),(m2_min,m1_max),"k--")

pyplot.plot((ns_max,ns_max),(m2_min,ns_max),"k:")
pyplot.plot((gap_max,gap_max),(m2_min,gap_max),"k:")

pyplot.plot((ns_max,m1_max),(ns_max,ns_max),"k:")
pyplot.plot((gap_max,m1_max),(gap_max,gap_max),"k:")

pyplot.xlabel("M1")
pyplot.ylabel("M2")
pyplot.title("MChirp = "+str((0.5)*(mcb+mcs))+" +/- "+str((mcb-mcs)*(0.5)))
pyplot.savefig("mass_plot.png")
